{"version":3,"sources":["serviceWorker.js","NewNeed.jsx","urls.js","Topbar.jsx","MeetNeed.jsx","Need.jsx","Needs.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","NewNeed","props","form","name","Item","label","rules","required","type","message","valuePropName","urls","UPDATE_URL","CREATE_URL","GET_URL","newNeedReducer","state","action","newNeedOpen","Topbar","useReducer","dispatch","Form","useForm","url","closeNeed","onSuccess","data","console","log","title","subTitle","extra","onClick","visible","onCancel","onOk","validateFields","then","values","resetFields","formData","a","requestOptions","method","headers","mode","body","JSON","stringify","email","phone","anonymous","need","fetch","resp","catch","err","alert","sendData","onNewNeed","submitData","MeetNeed","Need","useState","n","setNeed","meetOpen","setMeetOpen","_id","useEffect","needingUser","size","cb","rationale","onMetNeed","okText","Needs","pageNumber","setPageNumber","loading","setState","response","json","useFetch","itemTotal","pagination","onChange","page","pageSize","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","total","renderItem","App","className","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ccf0a29c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Checkbox, Form, Input } from 'antd'\n\nconst NewNeed = (props) => {\n    const { form } = props;\n\n\n    return (\n        <Form name=\"Submit New Need\" form={form}>\n            <Form.Item\n                name={\"name\"}\n                label='Name'\n                rules={[{ required: true }]}\n            >\n                    <Input />\n            </Form.Item>\n            <Form.Item\n                name={\"phone\"}\n                label='Phone'\n                rules={[{ required: false }]}\n            >\n                    <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"email\"\n                label=\"E-mail\"\n                rules={[{type: 'email', message: 'The input is not valid E-mail!'}]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"need\"\n                label=\"Need\"\n                rules={[{required: true}]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item name=\"anonymous\" valuePropName=\"checked\">\n                <Checkbox>I wish to remain anonymous when my need is displayed publicly</Checkbox>\n            </Form.Item>\n        </Form>\n    )\n};\nexport default NewNeed;","const urls = {\n    UPDATE_URL: (process.env.NODE_ENV==='development') ? \"http://localhost:8080/update\" : \"https://meetneeds.herokuapp.com/update\",\n    CREATE_URL: (process.env.NODE_ENV==='development') ? \"http://localhost:8080/create\" : \"https://meetneeds.herokuapp.com/create\",\n    GET_URL: (process.env.NODE_ENV==='development') ? \"http://localhost:8080/getall\" : \"https://meetneeds.herokuapp.com/getall\",\n};\n\nexport default urls;","import React, { useReducer } from 'react';\nimport NewNeed from './NewNeed';\nimport urls from './urls';\nimport { Button, Divider, Form, Modal, PageHeader } from 'antd';\n\nconst newNeedReducer = (state, action) => {\n    switch (action.type) {\n        case \"open\":\n            return {newNeedOpen: true};\n        case \"close\":\n            return {newNeedOpen: false};\n        default:\n            return state.newNeedOpen;\n    }\n};\n\n\nconst Topbar = (props) => {\n    const [ state, dispatch ] = useReducer(newNeedReducer, {newNeedOpen: false});\n    const [form] = Form.useForm();\n    const url = urls.CREATE_URL;\n    const closeNeed = () => {\n        dispatch({newNeedOpen: false})\n    };\n\n    const onSuccess = (data) => {\n        console.log(data);\n        closeNeed();\n    };\n\n    // TODO: Validate phone entries\n    const submitData = (formData) => {\n        console.log(\"Received this form data: \")\n        console.log(formData)\n        if (!(formData.name && formData.need && (formData.phone || formData.email))) {\n            alert(\"Please enter your name, your need, and at least one way we can contact you.\")\n            return;\n        }\n\n        async function sendData() {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                mode: 'no-cors',\n                body: JSON.stringify({\n                    \"needingUser\": {\n                        \"name\": formData.name,\n                        \"email\": formData.email,\n                        \"phone\": formData.phone,\n                        \"anon\": formData.anonymous\n                    },\n                    \"need\": formData.need,\n                })\n            };\n            fetch(url, requestOptions)\n            .then(resp => resp)\n            .then(data => onSuccess(data))\n            .catch(err => alert(`Something went wrong: ${err}`));\n        };\n\n        sendData();\n        props.onNewNeed();\n    };\n\n\n    return(\n        <PageHeader\n            title=\"Meet Needs\"\n            subTitle=\"Connecting Your Community\"\n            extra={<Button type=\"primary\" onClick={() => dispatch({type:\"open\"})}> New need </Button>}\n            >\n            <Modal\n                visible={state.newNeedOpen}\n                onCancel={closeNeed}\n                onOk={() => {\n                    form\n                      .validateFields()\n                      .then(values => {\n                        form.resetFields();\n                        submitData(values);\n                      })}}\n            >\n                <p>Plase use this form to submit a new need.</p>\n                <NewNeed form={form} closeNeed={closeNeed}/>\n                <p>Refer to our Privacy Policy for privacy details.</p>\n            </Modal>\n            <Divider />\n        </PageHeader>\n    )\n};\n\nexport default Topbar;","import React from 'react';\nimport { Form, Input } from 'antd'\n\nconst MeetNeed = (props) => {\n    const { form } = props;\n\n\n    return (\n        <Form name=\"Meet A Need\" form={form}>\n            <p>Thank you for volunteering to meet this need! </p>\n            <p>Please complete this form and we will be in touch soon.</p>\n            <Form.Item\n                name={\"name\"}\n                label='Name'\n                rules={[{ required: true }]}\n            >\n                    <Input />\n            </Form.Item>\n            <Form.Item\n                name={\"phone\"}\n                label='Phone'\n                rules={[{ required: false }]}\n            >\n                    <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"email\"\n                label=\"E-mail\"\n                rules={[{type: 'email', message: 'The input is not valid E-mail!'}]}\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                name=\"rationale\"\n                label=\"Please let us know how you'll meet this need\"\n                rules={[{required: true}]}\n            >\n                <Input />\n            </Form.Item>\n        </Form>\n    )\n};\nexport default MeetNeed;","import React, { useEffect, useState } from 'react';\nimport { Button, Card, Form, Modal } from 'antd';\nimport MeetNeed from './MeetNeed';\nimport urls from './urls';\n\nconst Need = props => {\n\n    const [n, setNeed] = useState(props);\n    const [meetOpen, setMeetOpen] = useState({meetOpen: false})\n    const [form] = Form.useForm();\n    const url = `${urls.UPDATE_URL}?id=${n._id}`;\n\n    const onSuccess = (data) => {\n        console.log(data);\n        setMeetOpen({meetOpen: false});\n    }\n\n    const submitData = (values, cb) => {\n        console.log(values);\n        if (!(values.name && values.rationale && (values.phone || values.email))) {\n            alert(\"Please enter your name, how you plan to provide for this need, and at least one way we can contact you.\")\n            return;\n        }\n\n        async function sendData() {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                mode: 'no-cors',\n                body: JSON.stringify({\n                    \"meetingUser\": {\n                        \"name\": values.name,\n                        \"email\": values.email,\n                        \"phone\": values.phone,\n                        \"rationale\": values.rationale,\n                    }})\n            };\n\n            fetch(url, requestOptions)\n            .then(resp => resp)\n            .then(data => onSuccess(data))\n            .catch(err => alert(`Something went wrong: ${err}`));\n        }\n\n        sendData();\n        props.onMetNeed();\n    };\n\n    useEffect(() => {\n        setNeed(props);\n      }, [props]);\n\n    return (\n        <div>\n            <Card title={`${n.needingUser.name} needs`}>\n                <p>{n.need}</p>\n                <Button size=\"small\" onClick={() => setMeetOpen({meetOpen: true})}>I can meet this need</Button>\n                <Modal\n                    visible={meetOpen.meetOpen}\n                    onCancel={() => setMeetOpen({meetOpen: false})}\n                    onOk={() => {\n                        form\n                            .validateFields()\n                            .then(values => {\n                            form.resetFields();\n                            submitData(values);\n                            })\n                    }}\n                    okText=\"Submit\"\n                >\n                    <MeetNeed form={form} />\n                </Modal>\n            </Card>\n        </div>\n    )\n};\nexport default Need;","import React, { useState, useEffect } from 'react';\nimport Topbar from './Topbar'\nimport Need from './Need'\nimport urls from './urls'\nimport { Card, List } from 'antd';\n\nconst useFetch = (url) => {\n    const [{ data, loading, pageNumber }, setState] = useState({\n        data: {},\n        loading: true,\n        pageNumber: 1,\n    })\n\n\n    useEffect(() => {\n        fetch(url)\n        .then(response => response.json())\n        .then(data => setState({data: data, loading: false, pageNumber: 1}))\n    }, [url, pageNumber]);\n\n    return { data, loading, pageNumber };\n};\n\n\nconst Needs = () => {\n    const [ pageNumber, setPageNumber ] = useState(1);\n    const queryURL = `${urls.GET_URL}?pagenumber=${pageNumber}`;\n    const { data, loading, itemTotal } = useFetch(queryURL);\n\n    // TODO: actually get the end page number to set the pagination to\n    return (\n        <div>\n            <Topbar onNewNeed={() => setPageNumber(0)}/>\n            {\n                (loading)\n                ?  <Card loading={loading} />\n                :  (data === null)\n                ? <Card>Woah! There are no unmet needs to load. Check back later to meet a need, or click the New Need button to create a new one.</Card>\n                : <List\n                        pagination={{\n                            onChange: (page) => {\n                            setPageNumber(page);\n                            },\n                            pageSize: 10,\n                        }}\n                        grid={{\n                            gutter: 16,\n                            xs: 1,\n                            sm: 2,\n                            md: 4,\n                            lg: 4,\n                            xl: 6,\n                            xxl: 3,\n                        }}\n                        dataSource={[...data]}\n                        total={itemTotal}\n                        renderItem={(n) => (\n                            <List.Item>\n                                <Need onMetNeed={() => setPageNumber(pageNumber + 1)} {...n}/>\n                            </List.Item>\n                        )}\n                    />\n            }\n        </div>\n    )\n};\n\nexport default Needs;","import React from 'react';\nimport Needs from './Needs'\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Needs />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  // TODO: Antd throws some strict mode errors. Investigate whether to disable this or not.\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}